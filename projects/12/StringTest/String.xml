<class>
  <keyword>class</keyword>
  <identifier>String</identifier>
  <symbol>{</symbol>
<classVarDec>
  <keyword>field</keyword>
  <keyword>int</keyword>
  <identifier>len</identifier>
  <symbol>;</symbol>
</classVarDec>
<classVarDec>
  <keyword>field</keyword>
  <keyword>int</keyword>
  <identifier>maxLen</identifier>
  <symbol>;</symbol>
</classVarDec>
<classVarDec>
  <keyword>field</keyword>
  <identifier>Array</identifier>
  <identifier>chars</identifier>
  <symbol>;</symbol>
</classVarDec>
<subroutineDec>
  <keyword>constructor</keyword>
  <identifier>String</identifier>
  <identifier>new</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>maxLength</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>maxLength</identifier>
</term>
  <symbol>=</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>maxLength</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>len</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>maxLen</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>maxLength</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>chars</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Array</identifier>
  <symbol>.</symbol>
  <identifier>new</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>maxLength</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <keyword>this</keyword>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>method</keyword>
  <keyword>void</keyword>
  <identifier>dispose</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<doStatement>
  <keyword>do</keyword>
  <identifier>chars</identifier>
  <symbol>.</symbol>
  <identifier>dispose</identifier>
  <symbol>(</symbol>
<expressionList>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>method</keyword>
  <keyword>int</keyword>
  <identifier>length</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <identifier>len</identifier>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>method</keyword>
  <keyword>char</keyword>
  <identifier>charAt</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>j</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <identifier>chars</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <identifier>j</identifier>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>method</keyword>
  <keyword>void</keyword>
  <identifier>setCharAt</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>j</identifier>
  <symbol>,</symbol>
  <keyword>char</keyword>
  <identifier>c</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>chars</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <identifier>j</identifier>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>c</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>method</keyword>
  <identifier>String</identifier>
  <identifier>appendChar</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>char</keyword>
  <identifier>c</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>len</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <identifier>maxLen</identifier>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>chars</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <identifier>len</identifier>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>c</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>len</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>len</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <keyword>this</keyword>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>method</keyword>
  <keyword>void</keyword>
  <identifier>eraseLastChar</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>len</identifier>
</term>
  <symbol>&gt;</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>len</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>len</identifier>
</term>
  <symbol>-</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>method</keyword>
  <keyword>int</keyword>
  <identifier>intValue</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<varDec>
  <keyword>var</keyword>
  <keyword>int</keyword>
  <identifier>intVal</identifier>
  <symbol>,</symbol>
  <identifier>index</identifier>
  <symbol>;</symbol>
</varDec>
<varDec>
  <keyword>var</keyword>
  <keyword>boolean</keyword>
  <identifier>neg</identifier>
  <symbol>;</symbol>
</varDec>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>intVal</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>len</identifier>
</term>
  <symbol>&gt;</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>&amp;</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>chars</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
</term>
  <symbol>=</symbol>
<term>
  <integerConstant>45</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>neg</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <keyword>true</keyword>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>index</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>neg</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <keyword>false</keyword>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>index</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>index</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <identifier>len</identifier>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>&amp;</symbol>
<term>
  <identifier>String</identifier>
  <symbol>.</symbol>
  <identifier>isDigit</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>chars</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <identifier>index</identifier>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>intVal</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>intVal</identifier>
</term>
  <symbol>*</symbol>
<term>
  <integerConstant>10</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>+</symbol>
<term>
  <identifier>String</identifier>
  <symbol>.</symbol>
  <identifier>charToDigit</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>chars</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <identifier>index</identifier>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>index</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>index</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>neg</identifier>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <symbol>-</symbol>
<term>
  <identifier>intVal</identifier>
</term>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <identifier>intVal</identifier>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>boolean</keyword>
  <identifier>isDigit</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>char</keyword>
  <identifier>c</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <symbol>~</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>c</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <integerConstant>48</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</term>
  <symbol>&amp;</symbol>
<term>
  <symbol>~</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>c</identifier>
</term>
  <symbol>&gt;</symbol>
<term>
  <integerConstant>57</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>int</keyword>
  <identifier>charToDigit</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>char</keyword>
  <identifier>c</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <identifier>c</identifier>
</term>
  <symbol>-</symbol>
<term>
  <integerConstant>48</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>char</keyword>
  <identifier>digitToChar</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>d</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <identifier>d</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>48</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>method</keyword>
  <keyword>void</keyword>
  <identifier>setInt</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>number</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>len</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>number</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>number</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <symbol>-</symbol>
<term>
  <identifier>number</identifier>
</term>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>appendChar</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>45</integerConstant>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>setIntHelper</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>number</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>method</keyword>
  <keyword>void</keyword>
  <identifier>setIntHelper</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>number</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<varDec>
  <keyword>var</keyword>
  <keyword>int</keyword>
  <identifier>nextNum</identifier>
  <symbol>;</symbol>
</varDec>
<statements>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>number</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <integerConstant>10</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<doStatement>
  <keyword>do</keyword>
  <identifier>appendChar</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>String</identifier>
  <symbol>.</symbol>
  <identifier>digitToChar</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>number</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>nextNum</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>number</identifier>
</term>
  <symbol>/</symbol>
<term>
  <integerConstant>10</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>setIntHelper</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>nextNum</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>appendChar</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>String</identifier>
  <symbol>.</symbol>
  <identifier>digitToChar</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>number</identifier>
</term>
  <symbol>-</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>nextNum</identifier>
</term>
  <symbol>*</symbol>
<term>
  <integerConstant>10</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>char</keyword>
  <identifier>newLine</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <integerConstant>128</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>char</keyword>
  <identifier>backSpace</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <integerConstant>129</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>char</keyword>
  <identifier>doubleQuote</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <integerConstant>34</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
  <symbol>}</symbol>
</class>
