<class>
  <keyword>class</keyword>
  <identifier>Memory</identifier>
  <symbol>{</symbol>
<classVarDec>
  <keyword>static</keyword>
  <identifier>Array</identifier>
  <identifier>ram</identifier>
  <symbol>;</symbol>
</classVarDec>
<classVarDec>
  <keyword>static</keyword>
  <identifier>Array</identifier>
  <identifier>heap</identifier>
  <symbol>;</symbol>
</classVarDec>
<classVarDec>
  <keyword>static</keyword>
  <keyword>int</keyword>
  <identifier>freeList</identifier>
  <symbol>;</symbol>
</classVarDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>void</keyword>
  <identifier>init</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>ram</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>heap</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>2048</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>freeList</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>2048</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>heap</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>heap</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>14335</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>int</keyword>
  <identifier>peek</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>address</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <identifier>ram</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <identifier>address</identifier>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>void</keyword>
  <identifier>poke</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>address</identifier>
  <symbol>,</symbol>
  <keyword>int</keyword>
  <identifier>value</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>ram</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <identifier>address</identifier>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>value</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>int</keyword>
  <identifier>alloc</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>size</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<varDec>
  <keyword>var</keyword>
  <identifier>Array</identifier>
  <identifier>block</identifier>
  <symbol>;</symbol>
</varDec>
<varDec>
  <keyword>var</keyword>
  <keyword>int</keyword>
  <identifier>block_next</identifier>
  <symbol>,</symbol>
  <identifier>block_size</identifier>
  <symbol>;</symbol>
</varDec>
<varDec>
  <keyword>var</keyword>
  <identifier>Array</identifier>
  <identifier>newBlock</identifier>
  <symbol>;</symbol>
</varDec>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>block</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>freeList</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>block_size</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>freeList</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>block_next</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>freeList</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>block_size</identifier>
</term>
  <symbol>&gt;</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>size</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>2</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>freeList</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>freeList</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>size</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>2</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>freeList</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>freeList</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>block_size</identifier>
</term>
  <symbol>-</symbol>
<term>
  <identifier>size</identifier>
</term>
  <symbol>-</symbol>
<term>
  <integerConstant>2</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>block</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>block</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>size</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <identifier>block</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>2</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <symbol>~</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>block_next</identifier>
</term>
  <symbol>=</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>block</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>block_next</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>block_size</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>block</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>block_next</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>block</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>block_size</identifier>
</term>
  <symbol>&gt;</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>size</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>2</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>block_size</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>block_size</identifier>
</term>
  <symbol>-</symbol>
<term>
  <identifier>size</identifier>
</term>
  <symbol>-</symbol>
<term>
  <integerConstant>2</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>block</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>block_size</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>newBlock</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>block</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>block_size</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>newBlock</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>newBlock</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>size</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <identifier>newBlock</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>2</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <symbol>-</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>void</keyword>
  <identifier>deAlloc</identifier>
  <symbol>(</symbol>
<parameterList>
  <identifier>Array</identifier>
  <identifier>o</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<varDec>
  <keyword>var</keyword>
  <identifier>Array</identifier>
  <identifier>block_next</identifier>
  <symbol>,</symbol>
  <identifier>block_next_next</identifier>
  <symbol>;</symbol>
</varDec>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>block_next</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>freeList</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>block_next_next</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>freeList</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <symbol>~</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>block_next_next</identifier>
</term>
  <symbol>=</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>block_next</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>block_next_next</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>block_next_next</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>block_next</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>block_next_next</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>o</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
  <symbol>}</symbol>
</class>
