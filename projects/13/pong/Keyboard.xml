<class>
  <keyword>class</keyword>
  <identifier>Keyboard</identifier>
  <symbol>{</symbol>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>void</keyword>
  <identifier>init</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>char</keyword>
  <identifier>keyPressed</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <identifier>Memory</identifier>
  <symbol>.</symbol>
  <identifier>peek</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>24576</integerConstant>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>char</keyword>
  <identifier>readChar</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<varDec>
  <keyword>var</keyword>
  <keyword>char</keyword>
  <identifier>ret</identifier>
  <symbol>;</symbol>
</varDec>
<statements>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>ret</identifier>
</term>
  <symbol>=</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>ret</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Keyboard</identifier>
  <symbol>.</symbol>
  <identifier>keyPressed</identifier>
  <symbol>(</symbol>
<expressionList>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <symbol>~</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>Keyboard</identifier>
  <symbol>.</symbol>
  <identifier>keyPressed</identifier>
  <symbol>(</symbol>
<expressionList>
</expressionList>
  <symbol>)</symbol>
</term>
  <symbol>=</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
</statements>
  <symbol>}</symbol>
</whileStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>Output</identifier>
  <symbol>.</symbol>
  <identifier>printChar</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>ret</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <identifier>ret</identifier>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <identifier>String</identifier>
  <identifier>readLine</identifier>
  <symbol>(</symbol>
<parameterList>
  <identifier>String</identifier>
  <identifier>message</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<varDec>
  <keyword>var</keyword>
  <identifier>String</identifier>
  <identifier>str</identifier>
  <symbol>;</symbol>
</varDec>
<varDec>
  <keyword>var</keyword>
  <keyword>char</keyword>
  <identifier>key</identifier>
  <symbol>;</symbol>
</varDec>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>str</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>String</identifier>
  <symbol>.</symbol>
  <identifier>new</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>64</integerConstant>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>Output</identifier>
  <symbol>.</symbol>
  <identifier>printString</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>message</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>key</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Keyboard</identifier>
  <symbol>.</symbol>
  <identifier>readChar</identifier>
  <symbol>(</symbol>
<expressionList>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <keyword>true</keyword>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>key</identifier>
</term>
  <symbol>=</symbol>
<term>
  <integerConstant>128</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <identifier>str</identifier>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>key</identifier>
</term>
  <symbol>=</symbol>
<term>
  <integerConstant>129</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<doStatement>
  <keyword>do</keyword>
  <identifier>str</identifier>
  <symbol>.</symbol>
  <identifier>eraseLastChar</identifier>
  <symbol>(</symbol>
<expressionList>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>Output</identifier>
  <symbol>.</symbol>
  <identifier>backSpace</identifier>
  <symbol>(</symbol>
<expressionList>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<doStatement>
  <keyword>do</keyword>
  <identifier>str</identifier>
  <symbol>.</symbol>
  <identifier>appendChar</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>key</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>key</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Keyboard</identifier>
  <symbol>.</symbol>
  <identifier>readChar</identifier>
  <symbol>(</symbol>
<expressionList>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>int</keyword>
  <identifier>readInt</identifier>
  <symbol>(</symbol>
<parameterList>
  <identifier>String</identifier>
  <identifier>message</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<varDec>
  <keyword>var</keyword>
  <identifier>String</identifier>
  <identifier>str</identifier>
  <symbol>;</symbol>
</varDec>
<varDec>
  <keyword>var</keyword>
  <keyword>char</keyword>
  <identifier>key</identifier>
  <symbol>;</symbol>
</varDec>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>str</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>String</identifier>
  <symbol>.</symbol>
  <identifier>new</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>64</integerConstant>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>Output</identifier>
  <symbol>.</symbol>
  <identifier>printString</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>message</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>key</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Keyboard</identifier>
  <symbol>.</symbol>
  <identifier>readChar</identifier>
  <symbol>(</symbol>
<expressionList>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <keyword>true</keyword>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>key</identifier>
</term>
  <symbol>=</symbol>
<term>
  <integerConstant>128</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <identifier>str</identifier>
  <symbol>.</symbol>
  <identifier>intValue</identifier>
  <symbol>(</symbol>
<expressionList>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>key</identifier>
</term>
  <symbol>=</symbol>
<term>
  <integerConstant>129</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<doStatement>
  <keyword>do</keyword>
  <identifier>str</identifier>
  <symbol>.</symbol>
  <identifier>eraseLastChar</identifier>
  <symbol>(</symbol>
<expressionList>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>Output</identifier>
  <symbol>.</symbol>
  <identifier>backSpace</identifier>
  <symbol>(</symbol>
<expressionList>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<doStatement>
  <keyword>do</keyword>
  <identifier>str</identifier>
  <symbol>.</symbol>
  <identifier>appendChar</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>key</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>key</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Keyboard</identifier>
  <symbol>.</symbol>
  <identifier>readChar</identifier>
  <symbol>(</symbol>
<expressionList>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<returnStatement>
  <keyword>return</keyword>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
  <symbol>}</symbol>
</class>
