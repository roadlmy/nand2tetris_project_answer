<class>
  <keyword>class</keyword>
  <identifier>Screen</identifier>
  <symbol>{</symbol>
<classVarDec>
  <keyword>static</keyword>
  <keyword>boolean</keyword>
  <identifier>color</identifier>
  <symbol>;</symbol>
</classVarDec>
<classVarDec>
  <keyword>static</keyword>
  <identifier>Array</identifier>
  <identifier>twoToThe</identifier>
  <symbol>;</symbol>
</classVarDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>void</keyword>
  <identifier>init</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>color</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <keyword>true</keyword>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Array</identifier>
  <symbol>.</symbol>
  <identifier>new</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>2</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>2</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>4</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>3</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>8</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>4</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>5</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>32</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>6</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>64</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>7</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>128</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>8</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>256</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>9</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>512</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>10</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>1024</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>11</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>2048</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>12</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>4096</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>13</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>8192</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>14</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>16384</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <integerConstant>15</integerConstant>
</term>
</expression>
  <symbol>]</symbol>
  <symbol>=</symbol>
<expression>
<term>
  <symbol>-</symbol>
<term>
  <integerConstant>32767</integerConstant>
</term>
</term>
  <symbol>-</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>void</keyword>
  <identifier>clearScreen</identifier>
  <symbol>(</symbol>
<parameterList>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<varDec>
  <keyword>var</keyword>
  <keyword>int</keyword>
  <identifier>i</identifier>
  <symbol>,</symbol>
  <identifier>j</identifier>
  <symbol>;</symbol>
</varDec>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>i</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>j</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>j</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <integerConstant>256</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>i</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>i</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <integerConstant>32</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<doStatement>
  <keyword>do</keyword>
  <identifier>Memory</identifier>
  <symbol>.</symbol>
  <identifier>poke</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>16384</integerConstant>
</term>
  <symbol>+</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <integerConstant>32</integerConstant>
</term>
  <symbol>*</symbol>
<term>
  <identifier>j</identifier>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>+</symbol>
<term>
  <identifier>i</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>i</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>i</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>j</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>j</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>void</keyword>
  <identifier>setColor</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>boolean</keyword>
  <identifier>b</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>color</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>b</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>void</keyword>
  <identifier>drawPixel</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <keyword>int</keyword>
  <identifier>y</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<varDec>
  <keyword>var</keyword>
  <keyword>int</keyword>
  <identifier>remainder</identifier>
  <symbol>,</symbol>
  <identifier>temp</identifier>
  <symbol>;</symbol>
</varDec>
<varDec>
  <keyword>var</keyword>
  <identifier>Array</identifier>
  <identifier>div</identifier>
  <symbol>;</symbol>
</varDec>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>div</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <integerConstant>32</integerConstant>
</term>
  <symbol>*</symbol>
<term>
  <identifier>y</identifier>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>+</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>x</identifier>
</term>
  <symbol>/</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>temp</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Memory</identifier>
  <symbol>.</symbol>
  <identifier>peek</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>16384</integerConstant>
</term>
  <symbol>+</symbol>
<term>
  <identifier>div</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>remainder</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>x</identifier>
</term>
  <symbol>-</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>x</identifier>
</term>
  <symbol>/</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>*</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>color</identifier>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>temp</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>temp</identifier>
</term>
  <symbol>|</symbol>
<term>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <identifier>remainder</identifier>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>temp</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>temp</identifier>
</term>
  <symbol>&amp;</symbol>
<term>
  <symbol>~</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <identifier>remainder</identifier>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>)</symbol>
</term>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>Memory</identifier>
  <symbol>.</symbol>
  <identifier>poke</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>16384</integerConstant>
</term>
  <symbol>+</symbol>
<term>
  <identifier>div</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>temp</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>void</keyword>
  <identifier>drawLine</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>x1</identifier>
  <symbol>,</symbol>
  <keyword>int</keyword>
  <identifier>y1</identifier>
  <symbol>,</symbol>
  <keyword>int</keyword>
  <identifier>x2</identifier>
  <symbol>,</symbol>
  <keyword>int</keyword>
  <identifier>y2</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<varDec>
  <keyword>var</keyword>
  <keyword>int</keyword>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <identifier>y</identifier>
  <symbol>,</symbol>
  <identifier>dx</identifier>
  <symbol>,</symbol>
  <identifier>dy</identifier>
  <symbol>;</symbol>
</varDec>
<varDec>
  <keyword>var</keyword>
  <keyword>int</keyword>
  <identifier>a</identifier>
  <symbol>,</symbol>
  <identifier>b</identifier>
  <symbol>,</symbol>
  <identifier>da</identifier>
  <symbol>,</symbol>
  <identifier>db</identifier>
  <symbol>;</symbol>
</varDec>
<varDec>
  <keyword>var</keyword>
  <keyword>int</keyword>
  <identifier>add1</identifier>
  <symbol>,</symbol>
  <identifier>add2</identifier>
  <symbol>;</symbol>
</varDec>
<varDec>
  <keyword>var</keyword>
  <keyword>int</keyword>
  <identifier>diff</identifier>
  <symbol>;</symbol>
</varDec>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>x</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>x1</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>y</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>y1</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>dx</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>x2</identifier>
</term>
  <symbol>-</symbol>
<term>
  <identifier>x1</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>dy</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>y2</identifier>
</term>
  <symbol>-</symbol>
<term>
  <identifier>y1</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>dy</identifier>
</term>
  <symbol>=</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>a</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Math</identifier>
  <symbol>.</symbol>
  <identifier>min</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>x1</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>x2</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>x</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>a</identifier>
</term>
  <symbol>-</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>a</identifier>
</term>
  <symbol>/</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>*</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>b</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Math</identifier>
  <symbol>.</symbol>
  <identifier>max</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>x1</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>x2</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>y</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>b</identifier>
</term>
  <symbol>-</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>b</identifier>
</term>
  <symbol>/</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>*</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>add1</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <integerConstant>32</integerConstant>
</term>
  <symbol>*</symbol>
<term>
  <identifier>y1</identifier>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>+</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>a</identifier>
</term>
  <symbol>/</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>add2</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <integerConstant>32</integerConstant>
</term>
  <symbol>*</symbol>
<term>
  <identifier>y1</identifier>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>+</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>b</identifier>
</term>
  <symbol>/</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>add1</identifier>
</term>
  <symbol>=</symbol>
<term>
  <identifier>add2</identifier>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>da</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>x</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>y</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>da</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>da</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <identifier>x</identifier>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>x</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>x</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>db</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Memory</identifier>
  <symbol>.</symbol>
  <identifier>peek</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>16384</integerConstant>
</term>
  <symbol>+</symbol>
<term>
  <identifier>add1</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>color</identifier>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>db</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>db</identifier>
</term>
  <symbol>|</symbol>
<term>
  <identifier>da</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>db</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>db</identifier>
</term>
  <symbol>&amp;</symbol>
<term>
  <symbol>~</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>da</identifier>
</term>
</expression>
  <symbol>)</symbol>
</term>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>Memory</identifier>
  <symbol>.</symbol>
  <identifier>poke</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>16384</integerConstant>
</term>
  <symbol>+</symbol>
<term>
  <identifier>add1</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>db</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>da</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>dx</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>a</identifier>
</term>
  <symbol>-</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>a</identifier>
</term>
  <symbol>/</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>*</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>dx</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>da</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>da</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <identifier>dx</identifier>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>dx</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>dx</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>db</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Memory</identifier>
  <symbol>.</symbol>
  <identifier>peek</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>16384</integerConstant>
</term>
  <symbol>+</symbol>
<term>
  <identifier>add1</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>color</identifier>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>db</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>db</identifier>
</term>
  <symbol>|</symbol>
<term>
  <identifier>da</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>db</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>db</identifier>
</term>
  <symbol>&amp;</symbol>
<term>
  <symbol>~</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>da</identifier>
</term>
</expression>
  <symbol>)</symbol>
</term>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>Memory</identifier>
  <symbol>.</symbol>
  <identifier>poke</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>16384</integerConstant>
</term>
  <symbol>+</symbol>
<term>
  <identifier>add1</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>db</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>da</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>add1</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>da</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <identifier>add2</identifier>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<doStatement>
  <keyword>do</keyword>
  <identifier>Memory</identifier>
  <symbol>.</symbol>
  <identifier>poke</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>16384</integerConstant>
</term>
  <symbol>+</symbol>
<term>
  <identifier>da</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>color</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>da</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>da</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>da</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>dx</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>b</identifier>
</term>
  <symbol>-</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>b</identifier>
</term>
  <symbol>/</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>*</symbol>
<term>
  <integerConstant>16</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>dx</identifier>
</term>
  <symbol>&gt;</symbol>
<term>
  <symbol>-</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>da</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>da</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>twoToThe</identifier>
  <symbol>[</symbol>
<expression>
<term>
  <identifier>dx</identifier>
</term>
</expression>
  <symbol>]</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>dx</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>dx</identifier>
</term>
  <symbol>-</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>db</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Memory</identifier>
  <symbol>.</symbol>
  <identifier>peek</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>16384</integerConstant>
</term>
  <symbol>+</symbol>
<term>
  <identifier>add2</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>color</identifier>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>db</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>db</identifier>
</term>
  <symbol>|</symbol>
<term>
  <identifier>da</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>db</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>db</identifier>
</term>
  <symbol>&amp;</symbol>
<term>
  <symbol>~</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>da</identifier>
</term>
</expression>
  <symbol>)</symbol>
</term>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>Memory</identifier>
  <symbol>.</symbol>
  <identifier>poke</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <integerConstant>16384</integerConstant>
</term>
  <symbol>+</symbol>
<term>
  <identifier>add2</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>db</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>dx</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>da</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <symbol>-</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>dx</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <symbol>-</symbol>
<term>
  <identifier>dx</identifier>
</term>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>da</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>dy</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>db</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <symbol>-</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>dy</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <symbol>-</symbol>
<term>
  <identifier>dy</identifier>
</term>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>db</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>a</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>b</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>diff</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>Math</identifier>
  <symbol>.</symbol>
  <identifier>abs</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>a</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
  <symbol>&lt;</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>dx</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>&amp;</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>Math</identifier>
  <symbol>.</symbol>
  <identifier>abs</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>b</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
  <symbol>&lt;</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>dy</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<doStatement>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawPixel</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>x</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>a</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>y</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>b</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>dx</identifier>
</term>
  <symbol>=</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>b</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>b</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>db</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<ifStatement>
  <keyword>if</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>diff</identifier>
</term>
  <symbol>&gt;</symbol>
<term>
  <integerConstant>0</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>b</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>b</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>db</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>diff</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>diff</identifier>
</term>
  <symbol>-</symbol>
<term>
  <identifier>dx</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
  <keyword>else</keyword>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>a</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>a</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>da</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>diff</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>diff</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>dy</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
</statements>
  <symbol>}</symbol>
</ifStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>void</keyword>
  <identifier>drawRectangle</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>x1</identifier>
  <symbol>,</symbol>
  <keyword>int</keyword>
  <identifier>y1</identifier>
  <symbol>,</symbol>
  <keyword>int</keyword>
  <identifier>x2</identifier>
  <symbol>,</symbol>
  <keyword>int</keyword>
  <identifier>y2</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<varDec>
  <keyword>var</keyword>
  <keyword>int</keyword>
  <identifier>y</identifier>
  <symbol>;</symbol>
</varDec>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>y</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>y1</identifier>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>y</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>y2</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<doStatement>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawLine</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>x1</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>y</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>x2</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>y</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>y</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>y</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
  <keyword>function</keyword>
  <keyword>void</keyword>
  <identifier>drawCircle</identifier>
  <symbol>(</symbol>
<parameterList>
  <keyword>int</keyword>
  <identifier>x</identifier>
  <symbol>,</symbol>
  <keyword>int</keyword>
  <identifier>y</identifier>
  <symbol>,</symbol>
  <keyword>int</keyword>
  <identifier>r</identifier>
</parameterList>
  <symbol>)</symbol>
<subroutineBody>
  <symbol>{</symbol>
<varDec>
  <keyword>var</keyword>
  <keyword>int</keyword>
  <identifier>dx</identifier>
  <symbol>;</symbol>
</varDec>
<varDec>
  <keyword>var</keyword>
  <keyword>int</keyword>
  <identifier>dy</identifier>
  <symbol>;</symbol>
</varDec>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>dy</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <symbol>-</symbol>
<term>
  <identifier>r</identifier>
</term>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<whileStatement>
  <keyword>while</keyword>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>dy</identifier>
</term>
  <symbol>&lt;</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>r</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>)</symbol>
  <symbol>{</symbol>
<statements>
<letStatement>
  <keyword>let</keyword>
  <identifier>dx</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>Math</identifier>
  <symbol>.</symbol>
  <identifier>sqrt</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>r</identifier>
</term>
  <symbol>*</symbol>
<term>
  <identifier>r</identifier>
</term>
</expression>
  <symbol>)</symbol>
</term>
  <symbol>-</symbol>
<term>
  <symbol>(</symbol>
<expression>
<term>
  <identifier>dy</identifier>
</term>
  <symbol>*</symbol>
<term>
  <identifier>dy</identifier>
</term>
</expression>
  <symbol>)</symbol>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
<doStatement>
  <keyword>do</keyword>
  <identifier>Screen</identifier>
  <symbol>.</symbol>
  <identifier>drawLine</identifier>
  <symbol>(</symbol>
<expressionList>
<expression>
<term>
  <identifier>x</identifier>
</term>
  <symbol>-</symbol>
<term>
  <identifier>dx</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>y</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>dy</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>x</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>dx</identifier>
</term>
</expression>
  <symbol>,</symbol>
<expression>
<term>
  <identifier>y</identifier>
</term>
  <symbol>+</symbol>
<term>
  <identifier>dy</identifier>
</term>
</expression>
</expressionList>
  <symbol>)</symbol>
  <symbol>;</symbol>
</doStatement>
<letStatement>
  <keyword>let</keyword>
  <identifier>dy</identifier>
  <symbol>=</symbol>
<expression>
<term>
  <identifier>dy</identifier>
</term>
  <symbol>+</symbol>
<term>
  <integerConstant>1</integerConstant>
</term>
</expression>
  <symbol>;</symbol>
</letStatement>
</statements>
  <symbol>}</symbol>
</whileStatement>
<returnStatement>
  <keyword>return</keyword>
  <symbol>;</symbol>
</returnStatement>
</statements>
  <symbol>}</symbol>
</subroutineBody>
</subroutineDec>
  <symbol>}</symbol>
</class>
